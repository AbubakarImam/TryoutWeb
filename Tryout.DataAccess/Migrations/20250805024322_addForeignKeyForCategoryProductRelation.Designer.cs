// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tryout.DataAccess.Data;

#nullable disable

namespace Tryout.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250805024322_addForeignKeyForCategoryProductRelation")]
    partial class addForeignKeyForCategoryProductRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tryout.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Action",
                            Name = "Bond"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Action",
                            Name = "Fast"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Animation",
                            Name = "Shrek"
                        });
                });

            modelBuilder.Entity("Tryout.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMDBId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Price100")
                        .HasColumnType("float");

                    b.Property<double>("Price50")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "A mind-bending journey through time and memory, where every decision changes the future. Intricately woven narrative that challenges perception.",
                            Director = "Christopher Nolan",
                            IMDBId = "IMD12345601",
                            ListPrice = 120.0,
                            Price = 110.0,
                            Price100 = 90.0,
                            Price50 = 100.0,
                            Title = "Echoes of Tomorrow"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "An emotional sci-fi drama exploring isolation and humanity’s survival on a distant silent planet. Rich visuals and deep character arcs.",
                            Director = "Patricia Jenkins",
                            IMDBId = "IMD12345602",
                            ListPrice = 95.0,
                            Price = 85.0,
                            Price100 = 70.0,
                            Price50 = 80.0,
                            Title = "Silent Horizon"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "A high-octane cyberpunk thriller set in a city where neon lights hide dark secrets. Fast-paced and visually immersive.",
                            Director = "Ryan Coogler",
                            IMDBId = "IMD12345603",
                            ListPrice = 100.0,
                            Price = 90.0,
                            Price100 = 75.0,
                            Price50 = 85.0,
                            Title = "Neon Drift"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Description = "A haunting mystery thriller unraveling a ghost story in a quiet seaside town. Gripping from start to finish with stunning cinematography.",
                            Director = "Greta Gerwig",
                            IMDBId = "IMD12345604",
                            ListPrice = 80.0,
                            Price = 70.0,
                            Price100 = 60.0,
                            Price50 = 65.0,
                            Title = "Whispers in the Fog"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "An epic space battle saga that blends stunning VFX with a tale of resistance and legacy. Perfect for action and sci-fi lovers.",
                            Director = "James Cameron",
                            IMDBId = "IMD12345605",
                            ListPrice = 110.0,
                            Price = 100.0,
                            Price100 = 85.0,
                            Price50 = 95.0,
                            Title = "Iron Skies: Rebirth"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "A poetic drama that explores love, grief, and memory across generations, beautifully captured in slow, moody frames.",
                            Director = "Sofia Coppola",
                            IMDBId = "IMD12345606",
                            ListPrice = 70.0,
                            Price = 65.0,
                            Price100 = 55.0,
                            Price50 = 60.0,
                            Title = "Velvet Ashes"
                        });
                });

            modelBuilder.Entity("Tryout.Models.Product", b =>
                {
                    b.HasOne("Tryout.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
